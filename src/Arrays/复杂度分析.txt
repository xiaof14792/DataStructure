********************简单的复杂度分析***********************

1. O(1), O(n), O(lgn), O(nlogn), O(n^2)

2. 大O描述的是运行时间和输入数据之间的关系

3. O(n) 算法和n为线性关系

4. 为什么要用O(n)，    忽略常数，实际时间 T = c1 * n + c2

5. 添加操作

   addLast     O(1)

   addFirst    O(n)

   addIndex    O(n/2) = O(n)                   resize             O(n)



        删除操作

   removeLast      O(1)

   removeFirst     O(n)

   removeIndex     O(n/2) = O(n)               resize             O(n)



        修改操作

   set             O(1)



        查找操作

   get(index)          O(1)

   contains(E e)            O(n)

   find(E e)                O(n)


   总结：

   增：O(n)
   删：O(n)
   查：已知下标  O(1)   未知下标  O(n)
   改：已知下标  O(1)   未知下标  O(n)



******************************均摊复杂度***************************************


1. resize  O(n)

   resize 的均摊复杂度为O(1)


*******************************复杂度震荡******************************************


1. 出现问题的原因： removeLast时resize过于着急

         解决方案： lazy

         当size = capacity / 4时， 才将capacity减半





